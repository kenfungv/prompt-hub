name: Frontend CI/CD

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'

env:
  NODE_VERSION: '18'
  WORKING_DIR: './frontend'

jobs:
  lint:
    name: Lint Frontend Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint

      - name: Check code formatting
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          npm run format:check || echo "Warning: Code formatting issues detected"

  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        run: npm test -- --coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ${{ env.WORKING_DIR }}/coverage
          flags: frontend
          name: frontend-coverage

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Build with Vite
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Build completed successfully"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.WORKING_DIR }}/dist
          retention-days: 7

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WORKING_DIR }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run TypeScript compiler
        working-directory: ${{ env.WORKING_DIR }}
        run: npx tsc --noEmit

  deploy-preview:
    name: Deploy Preview (PR only)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Deploy to preview environment
        run: |
          echo "Deploying to preview environment..."
          echo "Preview URL: https://preview-${{ github.event.pull_request.number }}.example.com"
          # Add your deployment script here (e.g., Vercel, Netlify, AWS S3, etc.)

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment script here
          # Examples:
          # - Vercel: vercel --prod
          # - Netlify: netlify deploy --prod
          # - AWS S3: aws s3 sync ./dist s3://your-bucket --delete
