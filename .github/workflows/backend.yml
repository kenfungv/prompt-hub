name: Backend CI/CD
on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - 'api/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - 'api/**'
      - '.github/workflows/backend.yml'
  workflow_dispatch:
env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'
  WORKING_DIR: './backend'
jobs:
  lint:
    name: Lint Backend Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
        working-directory: './backend'
      
      - name: Run ESLint
        run: npm run lint
        working-directory: './backend'
  test:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
        working-directory: './backend'
      
      - name: Create .env.test file
        run: |
          echo "NODE_ENV=test" >> .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/prompt_hub_test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-key" >> .env.test
          echo "PORT=3000" >> .env.test
        working-directory: './backend'
      
      - name: Run unit tests
        run: npm test
        working-directory: './backend'
        env:
          CI: true
      
      - name: Generate test coverage
        run: npm run test:coverage
        working-directory: './backend'
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: './backend/coverage'
          retention-days: 7
  integration-test:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
        working-directory: './backend'
      
      - name: Create .env.test file
        run: |
          echo "NODE_ENV=test" >> .env.test
          echo "MONGODB_URI=mongodb://localhost:27017/prompt_hub_test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-key" >> .env.test
          echo "PORT=3000" >> .env.test
        working-directory: './backend'
      
      - name: Run integration tests
        run: npm run test:integration
        working-directory: './backend'
        env:
          CI: true
  api-test:
    name: API Contract Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install backend dependencies
        run: npm install
        working-directory: './backend'
      
      - name: Create .env file
        run: |
          echo "NODE_ENV=test" >> .env
          echo "MONGODB_URI=mongodb://localhost:27017/prompt_hub_test" >> .env
          echo "JWT_SECRET=test-jwt-secret-key" >> .env
          echo "PORT=3000" >> .env
        working-directory: './backend'
      
      - name: Start backend server
        run: npm start &
        working-directory: './backend'
      
      - name: Wait for server to start
        run: npx wait-on http://localhost:3000/api/health -t 60000
      
      - name: Install API test dependencies
        run: npm install
        working-directory: ./api-tests
      
      - name: Run API contract tests
        run: npm test
        working-directory: ./api-tests
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        working-directory: './backend'
        continue-on-error: true
      
      - name: Check for vulnerable dependencies
        run: npx snyk test --severity-threshold=high
        working-directory: './backend'
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, api-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
        working-directory: './backend'
      
      - name: Build project
        run: npm run build
        working-directory: './backend'
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: './backend/dist'
          retention-days: 7
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: docker build -t prompt-hub-backend:latest -f './backend/Dockerfile' .
      
      - name: Save Docker image
        run: docker save prompt-hub-backend:latest -o backend-image.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-docker-image
          path: backend-image.tar
          retention-days: 7
