openapi: 3.0.3
info:
  title: Prompt Hub API
  version: 0.1.0
  description: OpenAPI spec generated from backend/models and routes. Kept in sync with backend/postman/collection.json
servers:
  - url: http://localhost:3000/api
    description: Local development
  - url: https://{host}/api
    variables:
      host:
        default: api.example.com
        description: Deployment host
tags:
  - name: Auth
  - name: Users
  - name: Prompts
  - name: Categories
  - name: Favorites
  - name: Votes
  - name: Collections
  - name: Health
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SearchParam:
      name: q
      in: query
      schema:
        type: string
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        avatar:
          type: string
          nullable: true
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
    Prompt:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            type: string
        author:
          $ref: '#/components/schemas/User'
        upvotes:
          type: integer
        downvotes:
          type: integer
        favorites:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Vote:
      type: object
      properties:
        userId:
          type: string
        promptId:
          type: string
        value:
          type: integer
          enum: [1, -1]
    Favorite:
      type: object
      properties:
        userId:
          type: string
        promptId:
          type: string
    Collection:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        owner:
          $ref: '#/components/schemas/User'
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/Prompt'
security:
  - bearerAuth: []
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /auth/register:
    post:
      tags: [Auth]
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /categories:
    get:
      tags: [Categories]
      summary: List categories
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /prompts:
    get:
      tags: [Prompts]
      summary: List prompts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: List of prompts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prompt'
    post:
      tags: [Prompts]
      summary: Create prompt
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                content:
                  type: string
                categoryId:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
  /prompts/{id}:
    get:
      tags: [Prompts]
      summary: Get prompt by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Prompt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
        '404':
          description: Not found
    put:
      tags: [Prompts]
      summary: Update prompt
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                categoryId:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
    delete:
      tags: [Prompts]
      summary: Delete prompt
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /prompts/{id}/vote:
    post:
      tags: [Votes]
      summary: Vote a prompt
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                value:
                  type: integer
                  enum: [1, -1]
      responses:
        '200':
          description: Voted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'
  /prompts/{id}/favorite:
    post:
      tags: [Favorites]
      summary: Toggle favorite
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Favorite toggled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
  /collections:
    get:
      tags: [Collections]
      summary: List collections
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
    post:
      tags: [Collections]
      summary: Create collection
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /collections/{id}:
    get:
      tags: [Collections]
      summary: Get collection by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '404':
          description: Not found
    put:
      tags: [Collections]
      summary: Update collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    delete:
      tags: [Collections]
      summary: Delete collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /collections/{id}/prompts:
    post:
      tags: [Collections]
      summary: Add prompt to collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [promptId]
              properties:
                promptId:
                  type: string
      responses:
        '200':
          description: Added
        '404':
          description: Not found
    delete:
      tags: [Collections]
      summary: Remove prompt from collection
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [promptId]
              properties:
                promptId:
                  type: string
      responses:
        '200':
          description: Removed
