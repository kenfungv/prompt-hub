openapi: 3.0.3
info:
  title: Prompt Hub API
  version: 0.1.2
  description: OpenAPI spec generated from backend/models and routes. Kept in sync with backend/postman/collection.json
servers:
  - url: http://localhost:3000/api
    description: Local development
  - url: https://{host}/api
    variables:
      host:
        default: api.example.com
        description: Deployment host
tags:
  - name: Auth
  - name: Users
  - name: Prompts
  - name: Categories
  - name: Favorites
  - name: Votes
  - name: Collections
  - name: Health
  - name: Webhooks
  - name: API Keys
  - name: Forks
  - name: Comments
  - name: Markdown
  - name: Permissions
  - name: Logs
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SearchParam:
      name: q
      in: query
      schema:
        type: string
  schemas:
    IdParam:
      type: string
      description: MongoDB ObjectId
    User:
      type: object
      properties:
        _id: { type: string }
        username: { type: string }
        email: { type: string, format: email }
        avatar: { type: string, nullable: true }
        role: { type: string, enum: [user, admin] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Category:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        slug: { type: string }
        description: { type: string, nullable: true }
    Prompt:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        content: { type: string }
        category: { $ref: '#/components/schemas/Category' }
        tags:
          type: array
          items: { type: string }
        author: { $ref: '#/components/schemas/User' }
        upvotes: { type: integer }
        downvotes: { type: integer }
        favorites: { type: integer }
        forkedFrom: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Vote:
      type: object
      properties:
        userId: { type: string }
        promptId: { type: string }
        value: { type: integer, enum: [1, -1] }
    Favorite:
      type: object
      properties:
        userId: { type: string }
        promptId: { type: string }
    Collection:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        owner: { $ref: '#/components/schemas/User' }
        prompts:
          type: array
          items: { $ref: '#/components/schemas/Prompt' }
    Webhook:
      type: object
      properties:
        _id: { type: string }
        name: { type: string }
        url: { type: string, format: uri }
        secret: { type: string }
        events:
          type: array
          items: { type: string }
        status: { type: string, enum: [active, inactive] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    WebhookLog:
      type: object
      properties:
        _id: { type: string }
        webhookId: { type: string }
        event: { type: string }
        statusCode: { type: integer }
        success: { type: boolean }
        requestBody: { type: object }
        responseBody: { type: object }
        error: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    ApiKey:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        name: { type: string }
        keyPrefix: { type: string }
        status: { type: string, enum: [active, inactive, revoked] }
        permissions:
          type: array
          items: { type: string }
        scopes:
          type: array
          items: { type: string }
        rateLimit:
          type: object
          properties:
            requestsPerMinute: { type: integer }
            requestsPerHour: { type: integer }
            requestsPerDay: { type: integer }
        usage:
          type: object
          properties:
            totalRequests: { type: integer }
            lastUsedAt: { type: string, format: date-time }
            requestsToday: { type: integer }
            requestsThisHour: { type: integer }
            requestsThisMinute: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Comment:
      type: object
      properties:
        _id: { type: string }
        promptId: { type: string }
        author: { $ref: '#/components/schemas/User' }
        content: { type: string }
        markdown: { type: boolean, default: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    Fork:
      type: object
      properties:
        _id: { type: string }
        sourcePromptId: { type: string }
        newPromptId: { type: string }
        userId: { type: string }
        createdAt: { type: string, format: date-time }
    MarkdownTestResult:
      type: object
      properties:
        input: { type: string }
        html: { type: string }
        warnings:
          type: array
          items: { type: string }
    PermissionChange:
      type: object
      properties:
        userId: { type: string }
        role: { type: string, enum: [user, admin] }
        changedBy: { type: string }
        changedAt: { type: string, format: date-time }
    AuditLog:
      type: object
      properties:
        _id: { type: string }
        actorId: { type: string }
        action: { type: string }
        resourceType: { type: string }
        resourceId: { type: string }
        metadata: { type: object }
        createdAt: { type: string, format: date-time }
security:
  - bearerAuth: []
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  # Prompts - Forks
  /prompts/{id}/fork:
    post:
      tags: [Forks, Prompts]
      summary: Fork a prompt
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '201':
          description: Fork created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Fork' }
  /prompts/{id}/forks:
    get:
      tags: [Forks, Prompts]
      summary: List forks of a prompt
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Fork' }
  # Comments
  /prompts/{id}/comments:
    get:
      tags: [Comments]
      summary: List comments for a prompt
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Comment' }
    post:
      tags: [Comments]
      summary: Create a comment (supports Markdown)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content: { type: string }
                markdown: { type: boolean, default: true }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Comment' }
  /comments/{commentId}:
    put:
      tags: [Comments]
      summary: Update a comment
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                markdown: { type: boolean }
      responses:
        '200': { description: Updated }
    delete:
      tags: [Comments]
      summary: Delete a comment
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  # Markdown testing
  /markdown/test:
    post:
      tags: [Markdown]
      summary: Render markdown for preview/testing
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [input]
              properties:
                input: { type: string, description: Markdown string }
                options:
                  type: object
                  properties:
                    sanitize: { type: boolean, default: true }
                    allowHTML: { type: boolean, default: false }
      responses:
        '200':
          description: Rendered
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MarkdownTestResult' }
  # Permission switching
  /users/{id}/role:
    put:
      tags: [Permissions, Users]
      summary: Change a user's role
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role: { type: string, enum: [user, admin] }
      responses:
        '200':
          description: Changed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PermissionChange' }
  # Audit logs
  /logs:
    get:
      tags: [Logs]
      summary: List audit logs
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: actorId
          in: query
          schema: { type: string }
        - name: action
          in: query
          schema: { type: string }
        - name: resourceType
          in: query
          schema: { type: string }
        - name: resourceId
          in: query
          schema: { type: string }
        - name: from
          in: query
          schema: { type: string, format: date-time }
        - name: to
          in: query
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AuditLog' }
  /logs/{id}:
    get:
      tags: [Logs]
      summary: Get a log entry
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Log entry
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuditLog' }
  # Webhooks and API Keys are defined above in file
