openapi: 3.0.3
info:
  title: Prompt Hub API
  version: 0.1.1
  description: OpenAPI spec generated from backend/models and routes. Kept in sync with backend/postman/collection.json
servers:
  - url: http://localhost:3000/api
    description: Local development
  - url: https://{host}/api
    variables:
      host:
        default: api.example.com
        description: Deployment host
tags:
  - name: Auth
  - name: Users
  - name: Prompts
  - name: Categories
  - name: Favorites
  - name: Votes
  - name: Collections
  - name: Health
  - name: Webhooks
  - name: API Keys
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SearchParam:
      name: q
      in: query
      schema:
        type: string
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        avatar:
          type: string
          nullable: true
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
    Prompt:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          items:
            type: string
        author:
          $ref: '#/components/schemas/User'
        upvotes:
          type: integer
        downvotes:
          type: integer
        favorites:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Vote:
      type: object
      properties:
        userId:
          type: string
        promptId:
          type: string
        value:
          type: integer
          enum: [1, -1]
    Favorite:
      type: object
      properties:
        userId:
          type: string
        promptId:
          type: string
    Collection:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        owner:
          $ref: '#/components/schemas/User'
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/Prompt'
    Webhook:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        url:
          type: string
          format: uri
        secret:
          type: string
        events:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    WebhookLog:
      type: object
      properties:
        _id:
          type: string
        webhookId:
          type: string
        event:
          type: string
        statusCode:
          type: integer
        success:
          type: boolean
        requestBody:
          type: object
        responseBody:
          type: object
        error:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    ApiKey:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        name:
          type: string
        keyPrefix:
          type: string
        status:
          type: string
          enum: [active, inactive, revoked]
        permissions:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            type: string
        rateLimit:
          type: object
          properties:
            requestsPerMinute:
              type: integer
            requestsPerHour:
              type: integer
            requestsPerDay:
              type: integer
        usage:
          type: object
          properties:
            totalRequests:
              type: integer
            lastUsedAt:
              type: string
              format: date-time
            requestsToday:
              type: integer
            requestsThisHour:
              type: integer
            requestsThisMinute:
              type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
security:
  - bearerAuth: []
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  # Existing paths omitted for brevity in this edit
  /webhooks:
    post:
      tags: [Webhooks]
      summary: Create webhook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, url, events]
              properties:
                name: { type: string }
                url: { type: string, format: uri }
                events:
                  type: array
                  items: { type: string }
                secret: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Webhook' }
    get:
      tags: [Webhooks]
      summary: List my webhooks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Webhook' }
  /webhooks/{id}:
    get:
      tags: [Webhooks]
      summary: Get webhook by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Webhook
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Webhook' }
    put:
      tags: [Webhooks]
      summary: Update webhook
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                url: { type: string, format: uri }
                events:
                  type: array
                  items: { type: string }
                status: { type: string, enum: [active, inactive] }
      responses:
        '200':
          description: Updated
    delete:
      tags: [Webhooks]
      summary: Delete webhook
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
  /webhooks/{id}/test:
    post:
      tags: [Webhooks]
      summary: Send test event to webhook
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Test sent }
  /webhooks/{id}/trigger:
    post:
      tags: [Webhooks]
      summary: Trigger webhook manually
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
      responses:
        '200': { description: Triggered }
  /webhooks/{id}/logs:
    get:
      tags: [Webhooks]
      summary: Get webhook logs
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Logs
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/WebhookLog' }
  /webhooks/{id}/stats:
    get:
      tags: [Webhooks]
      summary: Get webhook stats
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema:
                type: object
  /webhooks/events/types:
    get:
      tags: [Webhooks]
      summary: List supported webhook event types
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Types
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
  /webhooks/{id}/retry/{logId}:
    post:
      tags: [Webhooks]
      summary: Retry a failed webhook delivery
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - name: logId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Retried }
  /webhooks/{id}/verify:
    post:
      tags: [Webhooks]
      summary: Verify webhook endpoint
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Verified }

  /api-keys:
    post:
      tags: [API Keys]
      summary: Create API key
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                scopes:
                  type: array
                  items: { type: string }
                permissions:
                  type: array
                  items: { type: string }
                rateLimit:
                  $ref: '#/components/schemas/ApiKey/properties/rateLimit'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiKey' }
    get:
      tags: [API Keys]
      summary: List my API keys
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ApiKey' }
  /api-keys/{id}:
    get:
      tags: [API Keys]
      summary: Get API key by id
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: API key
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiKey' }
    put:
      tags: [API Keys]
      summary: Update API key
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                scopes:
                  type: array
                  items: { type: string }
                permissions:
                  type: array
                  items: { type: string }
                rateLimit:
                  $ref: '#/components/schemas/ApiKey/properties/rateLimit'
                status:
                  type: string
                  enum: [active, inactive, revoked]
      responses:
        '200': { description: Updated }
    delete:
      tags: [API Keys]
      summary: Delete API key
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }

  /api-keys/{id}/revoke:
    post:
      tags: [API Keys]
      summary: Revoke API key
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Revoked }
  /api-keys/{id}/activate:
    post:
      tags: [API Keys]
      summary: Activate API key
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Activated }
  /api-keys/{id}/regenerate:
    post:
      tags: [API Keys]
      summary: Regenerate API key
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Regenerated }
  /api-keys/{id}/rotate:
    post:
      tags: [API Keys]
      summary: Rotate API key
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Rotated }

  /api-keys/{id}/usage:
    get:
      tags: [API Keys]
      summary: Get API key usage snapshot
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Usage
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiKey/properties/usage' }
  /api-keys/{id}/usage/stats:
    get:
      tags: [API Keys]
      summary: Get API key usage stats
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Stats
          content:
           
